import os

from flask import Flask, request
import requests
import json
import random

app = Flask(__name__)

# BOT_TOKEN = '7143458358:AAESxL1wBU7B5m7mEaTOK4aRvbLF71TwSxs'
bot_token = os.environ.get('BOT_TOKEN')
# LOCAL_TUNNEL_URL = 'https://rude-houses-sit.loca.lt'
WEBHOOK_URL = f'https://cheb-eng.onrender.com/webhook'

USERS_FILE = 'users.json'

def load_user_data(chat_id):
    try:
        with open(USERS_FILE, 'r') as file:
            users_data = json.load(file)
    except FileNotFoundError:
        return None

    return users_data.get(str(chat_id))

user_data = None

def update_user_data(chat_id, new_data):
    try:
        with open(USERS_FILE, 'r') as file:
            users_data = json.load(file)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    users_data[chat_id] = new_data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open(USERS_FILE, 'w') as file:
        json.dump(users_data, file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–∞—Ö –∏ —Å–ª–æ–≤–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
def load_data():
    with open('topics.json', 'r', encoding='utf-8') as f:
        topics = json.load(f)
    return topics

topics = load_data()

def set_webhook(bot_token, webhook_url):
    url = f'https://api.telegram.org/bot{bot_token}/setWebhook'
    payload = {'url': webhook_url}
    response = requests.post(url, data=payload)
    print(response.text)

def parse_update(update):
    chat_id = update['message']['chat']['id']
    text = update['message']['text']
    return chat_id, text

def send_message(chat_id, text):
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    payload = {'chat_id': chat_id, 'text': text}
    response = requests.post(url, data=payload)
    print(response.text)

def start_menu(chat_id):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = {
        "keyboard": [[{"text": "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"}], [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}], [{"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}]],
        "resize_keyboard": True
    }
    payload = {
        'chat_id': chat_id,
        'text': text,
        'reply_markup': json.dumps(keyboard)
    }
    response = requests.post('https://api.telegram.org/bot{}/sendMessage'.format(bot_token), data=payload)
    print(response.text)


def start_test(chat_id, topics):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    keyboard = {
        "keyboard": [[{"text": topic['title']}] for topic in topics['topics']],
        "resize_keyboard": True
    }

    payload = {
        'chat_id': chat_id,
        'text': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        'reply_markup': json.dumps(keyboard)
    }
    response = requests.post('https://api.telegram.org/bot{}/sendMessage'.format(bot_token), data=payload)
    print(response.text)

thought_word = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def handle_topic_choice(chat_id, topics, topic_title):
    chosen_topic = None
    for topic in topics['topics']:
        if topic['title'] == topic_title:
            chosen_topic = topic
            break

    if chosen_topic:
        words = chosen_topic['words']
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        word = random.choice(words)
        global thought_word
        thought_word = word['translation']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
        translations = [word['translation'] for word in words]
        random.shuffle(translations)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
        keyboard = {
            "keyboard": [[{"text": translation}] for translation in translations],
            "resize_keyboard": True
        }

        payload = {
            'chat_id': chat_id,
            'text': f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: {word['english']}",
            'reply_markup': json.dumps(keyboard)
        }
        response = requests.post('https://api.telegram.org/bot{}/sendMessage'.format(bot_token), data=payload)
        print(response.text)
    else:
        send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É.")


def show_statistics(chat_id):
    # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    pass

def settings_menu(chat_id):
    # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    pass


def handle_translation_attempt(chat_id, correct_translation, user_translation):
    if user_translation == correct_translation:
        send_message(chat_id, "–í–µ—Ä–Ω–æ! üëç")
    else:
        send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω–æ. üòî –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {correct_translation}")

    start_menu(chat_id)


@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        update = request.get_json()
        chat_id, text = parse_update(update)

        global user_data
        user_data = load_user_data(chat_id)

        if text == '/start':
            start_menu(chat_id)
        elif text == '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç':
            start_test(chat_id, topics)
        elif text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            show_statistics(chat_id)
        elif text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            settings_menu(chat_id)
        elif text in [topic['title'] for topic in topics['topics']]:
            handle_topic_choice(chat_id, topics, text)
        elif text in [word['translation'] for topic in topics['topics'] for word in topic['words']]:
            print(thought_word)
            print(text)
            handle_translation_attempt(chat_id, thought_word, text)
        else:
            send_message(chat_id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
    return 'ok'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)), debug=True)
